function u64 getCharacterSpriteKey(u8 character)
{
    if (character == CHARACTER_TAILS)
    {
	if (super.active)
	{
        	if (isMainCharacter(CHARACTER_SONIC))
        	{
        	    return "character_supertails"
        	}
		if (isMainCharacter(CHARACTER_KNUCKLES))
        	{
        	    return "character_supertails"
        	}
	}
	if (super.active == 0xff)
	{
        	if (isMainCharacter(CHARACTER_SONIC))
        	{
        	    return "character_hypertails"
        	}
		if (isMainCharacter(CHARACTER_KNUCKLES))
        	{
        	    return "character_hypertails"
        	}
	}
    }
return base.getCharacterSpriteKey(character)
}

function void UpdatePaletteEffects.SuperForm.moddingVersion(u8 characterVersion)
{
	if (!isSecondCharacter(CHARACTER_TAILS))
	{
		base.UpdatePaletteEffects.SuperForm.moddingVersion(characterVersion)
		return 
	}

	if (super.palettefx.state & 0x80)
	{
		// Update ongoing palette effect
		u8 character = getMainCharacter()
		bool isHyperEffect = (super.active == 0xff || super.active.tails == 0xff)
		u16 nextFrame = (super.palettefx.frame + 6) % (isHyperEffect ? 108 : 18)
		u16 blendFactor = super.palettefx.timer * 0x100 / 0x0f
		if (nextFrame % 18 == 0)
			blendFactor = 0x100 - blendFactor
		else if (nextFrame % 18 == 12)
			blendFactor = 0

		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = character * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			// Load modded Super palette
			u8 line = 5
			if (isHyperEffect)
			{
				// Hyper color cycle (if mod supports it)
				line = 6 + super.palettefx.frame / 18
				if (!System.hasExternalPaletteData(getCharacterPaletteKey(character), line))
					line = 5
			}
			zeroMemory(dest, 0x40)
			u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), line, 0x800000, 0x20)
			for (u16 i = 0; i < numColors; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
			}

			for (u8 k = 0; k < 0x40; k += 2)
			{
				if (u16[dest + k] == 0)
				{
					// Use original color as fallback
					u16[dest + k] = u16[source + k]
				}
				else
				{
					// Apply flash effect
					u16[dest + k] = blendColorsPacked(u16[dest + k], 0x0eee, blendFactor)
				}
			}
		}

		--super.palettefx.timer
		if (super.palettefx.timer < 0)
		{
			super.palettefx.timer = 0x0f
			super.palettefx.frame = nextFrame
		}
	}
	else if (super.palettefx.state == 1)
	{
		// Fade in
		//  -> Do not use any fade-in at all
		super.palettefx.frame = 0
		super.palettefx.frame.tails = 0
		super.palettefx.state = 0xff
		u8[0xffffb02e] = 0		// Reset "char.control_flags"
	}
	else  // (super.palettefx.state == 2)
	{
		// Fade out
		if (super.palettefx.frame >= 30)
		{
			// This is the first frame, set everything so that only the timer is used
			super.palettefx.frame = 0
			super.palettefx.frame.tails = 0
			super.palettefx.timer = 0x11
		}

		u16 blendFactor = clamp(u16(super.palettefx.timer) * 0x100 / 0x12, 0, 0x100)
		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = getMainCharacter() * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			for (u8 k = 0; k < 0x40; k += 2)
			{
				u16[dest + k] = blendColorsPacked(u16[source + k], 0x0eee, blendFactor * 3/4)
			}
		}

		if (characterVersion == 2)
		{
			// Tails: Update of Sonic's colors used by the Flickies
			u32 superPaletteAddress = 0x00398e + 0x1e
			for (u8 k = 0; k < 6; k += 2)
			{
				u16[0xfffffc04 + k] = blendColorsPacked(u16[0x802184 + k], u16[superPaletteAddress + k], blendFactor)
			}

			if (level.water_present)
			{
				superPaletteAddress = UpdatePaletteEffects.SuperForm.getSuperSonicUnderwaterPalette() + 0x1e
				for (u8 k = 0; k < 6; k += 2)
				{
					u16[0xfffff084 + k] = blendColorsPacked(u16[0x802384 + k], u16[superPaletteAddress + k], blendFactor)
				}
			}
		}

		if (super.palettefx.timer == 0)
		{
			// Fully faded out
			super.palettefx.state = 0
		}
		else
		{
			--super.palettefx.timer
		}
	}
    	if (super.palettefx.state & 0x80)
	{
		// Update ongoing palette effect
		u8 character = getSecondCharacter()
		bool isHyperEffect = (super.active == 0xff || super.active.tails == 0xff)
		u16 nextFrame = (super.palettefx.frame + 6) % (isHyperEffect ? 108 : 18)
		u16 blendFactor = super.palettefx.timer * 0x100 / 0x0f
		if (nextFrame % 18 == 0)
			blendFactor = 0x100 - blendFactor
		else if (nextFrame % 18 == 12)
			blendFactor = 0

		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = character * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			// Load modded Super palette
			u8 line = 5
			if (isHyperEffect)
			{
				// Hyper color cycle (if mod supports it)
				line = 6 + super.palettefx.frame / 18
				if (!System.hasExternalPaletteData(getCharacterPaletteKey(character), line))
					line = 5
			}
			zeroMemory(dest, 0x40)
			u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), line, 0x800000, 0x20)
			for (u16 i = 0; i < numColors; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
			}

			for (u8 k = 0; k < 0x40; k += 2)
			{
				if (u16[dest + k] == 0)
				{
					// Use original color as fallback
					u16[dest + k] = u16[source + k]
				}
				else
				{
					// Apply flash effect
					u16[dest + k] = blendColorsPacked(u16[dest + k], 0x0eee, blendFactor)
				}
			}
		}

		--super.palettefx.timer
		if (super.palettefx.timer < 0)
		{
			super.palettefx.timer = 0x0f
			super.palettefx.frame = nextFrame
		}
	}
	else if (super.palettefx.state == 1)
	{
		// Fade in
		//  -> Do not use any fade-in at all
		super.palettefx.frame = 0
		super.palettefx.frame.tails = 0
		super.palettefx.state = 0xff
		u8[0xffffb02e] = 0		// Reset "char.control_flags"
	}
	else  // (super.palettefx.state == 2)
	{
		// Fade out
		if (super.palettefx.frame >= 30)
		{
			// This is the first frame, set everything so that only the timer is used
			super.palettefx.frame = 0
			super.palettefx.frame.tails = 0
			super.palettefx.timer = 0x11
		}

		u16 blendFactor = clamp(u16(super.palettefx.timer) * 0x100 / 0x12, 0, 0x100)
		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = getSecondCharacter() * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			for (u8 k = 0; k < 0x40; k += 2)
			{
				u16[dest + k] = blendColorsPacked(u16[source + k], 0x0eee, blendFactor * 3/4)
			}
		}

		if (characterVersion == 2)
		{
			// Tails: Update of Sonic's colors used by the Flickies
			u32 superPaletteAddress = 0x00398e + 0x1e
			for (u8 k = 0; k < 6; k += 2)
			{
				u16[0xfffffc04 + k] = blendColorsPacked(u16[0x802184 + k], u16[superPaletteAddress + k], blendFactor)
			}

			if (level.water_present)
			{
				superPaletteAddress = UpdatePaletteEffects.SuperForm.getSuperSonicUnderwaterPalette() + 0x1e
				for (u8 k = 0; k < 6; k += 2)
				{
					u16[0xfffff084 + k] = blendColorsPacked(u16[0x802384 + k], u16[superPaletteAddress + k], blendFactor)
				}
			}
		}

		if (super.palettefx.timer == 0)
		{
			// Fully faded out
			super.palettefx.state = 0
		}
		else
		{
			--super.palettefx.timer
		}
	}
}

function void Character.TailsAI.Update()
{
	A1 = 0xffffb000		// Player 1

	u8 flags = ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0

	if (objA1.state == char.state.TRANSFORMING) && (char.flags & char.flag.IN_AIR)
	{
		char.state = char.state.TAILS_TRANSFORM
	}
	if (char.flags & char.flag.UNDERWATER)
	{
		if (super.active)
		{
			if (super.active == 0xff)
			{
				super.active.tails = 0xff
				char.bonus_effect |= char.bonus.INVINCIBLE
				global.move.speedcap.tails = 0x500
				global.move.acceleration.tails = 0x18
				global.move.deceleration.tails = 0x80
			}
			else
			{
				super.active.tails = 0x01
				char.bonus_effect |= char.bonus.INVINCIBLE
				global.move.speedcap.tails = 0x500
				global.move.acceleration.tails = 0x18
				global.move.deceleration.tails = 0x80
			}
		}
		else if (super.active == 0x00)
		{
			super.active.tails = 0x00
			char.bonus_effect &= ~char.bonus.INVINCIBLE
			global.move.speedcap.tails = 0x300
			global.move.acceleration.tails = 0x06
			global.move.deceleration.tails = 0x40
		}
	}
	else
	{
		if (super.active)
		{
			if (super.active == 0xff)
			{
				super.active.tails = 0xff
				char.bonus_effect |= char.bonus.INVINCIBLE
				global.move.speedcap.tails = 0x900
				global.move.acceleration.tails = 0x30
				global.move.deceleration.tails = 0x100
			}
			else
			{
				super.active.tails = 0x01
				char.bonus_effect |= char.bonus.INVINCIBLE
				global.move.speedcap.tails = 0x900
				global.move.acceleration.tails = 0x30
				global.move.deceleration.tails = 0x100
			}
		}
		else if (super.active == 0x00)
		{
			super.active.tails = 0x00
			char.bonus_effect &= ~char.bonus.INVINCIBLE
			global.move.speedcap.tails = 0x600
			global.move.acceleration.tails = 0x0c
			global.move.deceleration.tails = 0x80
		}
	}
	base.Character.TailsAI.Update()
}